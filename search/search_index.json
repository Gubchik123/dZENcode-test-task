{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":"<p>This is a page for leaving comments. Users can add comments with various features, and all the entered comments are saved in a relational database (DB), including user data for identification.</p>"},{"location":"#demo","title":"Demo","text":""},{"location":"#project-modules","title":"Project modules","text":""},{"location":"#features","title":"Features","text":"<ul> <li>Users can leave comments with the following fields:<ul> <li>User Name (alphanumeric characters) - required field.</li> <li>E-mail (email format) - required field.</li> <li>Home page (URL format) - optional field.</li> <li>CAPTCHA (alphanumeric characters) - image and required field.</li> <li>Text (the main message text) - required field. HTML tags except the allowed ones are not allowed.</li> </ul> </li> <li>The main page of the application has the following requirements:<ul> <li>Comments can have multiple replies (cascade display).</li> <li>Top-level comments (not replies) are displayed in a table format with the ability to sort by the following fields: User Name, E-mail, and Date added (both in ascending and descending order).</li> <li>Messages are paginated with 25 messages per page.</li> </ul> </li> <li>JavaScript:<ul> <li>Server-side and client-side validation of input data.</li> <li>Panel with buttons for HTML tags (<code>[i]</code>, <code>[strong]</code>, <code>[code]</code>, <code>[a]</code>).</li> </ul> </li> <li>File Handling:<ul> <li>Users can add an image or a text file to their comment.</li> <li>Images resizes proportionally to a maximum size of 320x240 pixels if the uploaded image is larger. Allowed file formats are JPG, GIF, and PNG.</li> <li>Text files should not exceed 100 KB in size, and the only allowed format is TXT.</li> <li>File preview includes visual effects (e.g. Lightbox2).</li> </ul> </li> <li>Regular Expressions:<ul> <li>Users can use the following allowed HTML tags in their messages: <code>&lt;a href=\"\" title=\"\"&gt; &lt;/a&gt; &lt;code&gt; &lt;/code&gt; &lt;i&gt; &lt;/i&gt; &lt;strong&gt; &lt;/strong&gt;</code>.</li> <li>There is validation to ensure proper closing of tags.</li> </ul> </li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":"<p>The project utilizes the following technologies and tools:</p> <ul> <li>Backend:<ul> <li>Python programming language (OOP);</li> <li>Django framework with the django-simple-captcha extension;</li> <li>MySQL database (Django ORM).</li> </ul> </li> <li>Frontend:<ul> <li>HTML &amp; CSS;</li> <li>JavaScript;</li> <li>Bootstrap 5.</li> </ul> </li> <li>Git for version control.</li> </ul>"},{"location":"#environment-variables","title":"Environment Variables","text":"<p>To run this project, you will need to add the following environment variables:</p> <p><code>SECRET_KEY</code> <code>DB_HOST</code> <code>DB_NAME</code> <code>DB_USER</code> <code>DB_PASSWORD</code></p> <p>Look at the file_env_example.txt</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with the project, follow these steps:</p> <ol> <li> <p>Clone the repository:     <code>git clone https://github.com/Gubchik123/dZENcode-test-task.git</code></p> </li> <li> <p>Go to the project directory:</p> <p><code>cd dZENcode-test-task</code></p> </li> <li> <p>Install the required dependencies:     <code>pip install -r requirements.txt</code></p> </li> <li> <p>Set up the database connection and configurations according to the selected database engine. Apply migrations     <code>python manage.py migrate</code></p> </li> <li> <p>Run the Django development server:     <code>python manage.py runserver</code></p> <p>Note: Don't forget about environment variables</p> </li> <li> <p>Access the application in your web browser at <code>http://127.0.0.1:8000</code> (or the appropriate URL based on your Django configuration).</p> </li> </ol>"},{"location":"#conclusion","title":"Conclusion","text":"<p>The \"Spa comments\" is a feature-rich web application built using Django, JavaScript, and MySQL. It allows users to leave comments with various options, ensures data validation and security, and provides a user-friendly interface with interactive elements.</p>"},{"location":"manage/","title":"manage.py","text":""},{"location":"manage/#manage.main","title":"<code>main()</code>","text":"<p>Run administrative tasks.</p> Source code in <code>manage.py</code> <pre><code>def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"spa.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n</code></pre>"},{"location":"comments/apps/","title":"apps.py","text":""},{"location":"comments/forms/","title":"forms.py","text":""},{"location":"comments/forms/#comments.forms.CommentModelForm","title":"<code>CommentModelForm</code>","text":"<p>             Bases: <code>ModelForm</code></p> <p>Model form for the Comment model for creating a comment.</p> Source code in <code>comments\\forms.py</code> <pre><code>class CommentModelForm(forms.ModelForm):\n    \"\"\"Model form for the Comment model for creating a comment.\"\"\"\n\n    username = forms.CharField(\n        max_length=100,\n        min_length=2,\n        required=True,\n        validators=[UnicodeUsernameValidator()],\n        widget=forms.TextInput(attrs=FIELD_WIDGET_ATTRS),\n    )\n    email = forms.EmailField(\n        required=True,\n        widget=forms.EmailInput(attrs=FIELD_WIDGET_ATTRS),\n    )\n    captcha = CaptchaField(widget=CaptchaTextInput(attrs=FIELD_WIDGET_ATTRS))\n\n    def save(\n        self,\n        comment_parent_id: str | None,\n        canvas_url: str | None,\n        commit=False,\n    ) -&gt; None:\n        \"\"\"Creates a comment for new or exist author.\"\"\"\n        comment: Comment = super().save(commit)\n\n        if comment_parent_id and comment_parent_id.isdigit():\n            comment.parent = get_object_or_404(\n                Comment, id=int(comment_parent_id)\n            )\n        comment.author = self._get_author()\n\n        if canvas_url:\n            comment.file.save(\n                comment.file.name,\n                self._get_image_file_from_(canvas_url, comment.file.name),\n            )\n        comment.save()\n\n    def _get_author(self) -&gt; Author:\n        \"\"\"Returns new or exist author.\"\"\"\n        author, _ = Author.objects.get_or_create(\n            username=self.cleaned_data[\"username\"],\n            email=self.cleaned_data[\"email\"],\n        )\n        return author\n\n    def _get_image_file_from_(\n        self, canvas_url: str, filename: str\n    ) -&gt; ContentFile:\n        \"\"\"Returns content file from decoded canvas_url.\"\"\"\n        image_data = canvas_url.split(\",\")[1]\n        return ContentFile(base64.b64decode(image_data), name=filename)\n\n    class Meta:\n        \"\"\"Meta options for the CommentModelForm.\"\"\"\n\n        model = Comment\n        fields = (\"username\", \"email\", \"home_page\", \"captcha\", \"text\", \"file\")\n        labels = {\n            \"home_page\": \"Home page (optional)\",\n            \"file\": \"Attached comment file (optional)\",\n        }\n        widgets = {\n            \"home_page\": forms.URLInput(attrs=FIELD_WIDGET_ATTRS),\n            \"text\": forms.Textarea(attrs=FIELD_WIDGET_ATTRS),\n            \"file\": forms.FileInput(\n                attrs={\n                    \"class\": \"form-control mb-1\",\n                    \"accept\": \".jpg, .jpeg, .gif, .png, .txt\",\n                }\n            ),\n        }\n</code></pre>"},{"location":"comments/forms/#comments.forms.CommentModelForm.Meta","title":"<code>Meta</code>","text":"<p>Meta options for the CommentModelForm.</p> Source code in <code>comments\\forms.py</code> <pre><code>class Meta:\n    \"\"\"Meta options for the CommentModelForm.\"\"\"\n\n    model = Comment\n    fields = (\"username\", \"email\", \"home_page\", \"captcha\", \"text\", \"file\")\n    labels = {\n        \"home_page\": \"Home page (optional)\",\n        \"file\": \"Attached comment file (optional)\",\n    }\n    widgets = {\n        \"home_page\": forms.URLInput(attrs=FIELD_WIDGET_ATTRS),\n        \"text\": forms.Textarea(attrs=FIELD_WIDGET_ATTRS),\n        \"file\": forms.FileInput(\n            attrs={\n                \"class\": \"form-control mb-1\",\n                \"accept\": \".jpg, .jpeg, .gif, .png, .txt\",\n            }\n        ),\n    }\n</code></pre>"},{"location":"comments/forms/#comments.forms.CommentModelForm.save","title":"<code>save(comment_parent_id, canvas_url, commit=False)</code>","text":"<p>Creates a comment for new or exist author.</p> Source code in <code>comments\\forms.py</code> <pre><code>def save(\n    self,\n    comment_parent_id: str | None,\n    canvas_url: str | None,\n    commit=False,\n) -&gt; None:\n    \"\"\"Creates a comment for new or exist author.\"\"\"\n    comment: Comment = super().save(commit)\n\n    if comment_parent_id and comment_parent_id.isdigit():\n        comment.parent = get_object_or_404(\n            Comment, id=int(comment_parent_id)\n        )\n    comment.author = self._get_author()\n\n    if canvas_url:\n        comment.file.save(\n            comment.file.name,\n            self._get_image_file_from_(canvas_url, comment.file.name),\n        )\n    comment.save()\n</code></pre>"},{"location":"comments/models/","title":"models.py","text":""},{"location":"comments/models/#comments.models.Author","title":"<code>Author</code>","text":"<p>             Bases: <code>Model</code></p> <p>A model representing a comment author.</p> Source code in <code>comments\\models.py</code> <pre><code>class Author(models.Model):\n    \"\"\"A model representing a comment author.\"\"\"\n\n    username = models.CharField(\n        max_length=100,\n        unique=False,\n        blank=False,\n        null=False,\n        verbose_name=\"Username\",\n    )\n    email = models.EmailField(\n        unique=False, blank=False, null=False, verbose_name=\"Email address\"\n    )\n\n    def __str__(self) -&gt; str:\n        \"\"\"Returns string representation of the Author model.\"\"\"\n        return self.username\n\n    class Meta:\n        \"\"\"Meta options for the Author model.\"\"\"\n\n        ordering = [\"username\"]\n        verbose_name = \"Comment author\"\n        verbose_name_plural = \"Comment authors\"\n</code></pre>"},{"location":"comments/models/#comments.models.Author.Meta","title":"<code>Meta</code>","text":"<p>Meta options for the Author model.</p> Source code in <code>comments\\models.py</code> <pre><code>class Meta:\n    \"\"\"Meta options for the Author model.\"\"\"\n\n    ordering = [\"username\"]\n    verbose_name = \"Comment author\"\n    verbose_name_plural = \"Comment authors\"\n</code></pre>"},{"location":"comments/models/#comments.models.Author.__str__","title":"<code>__str__()</code>","text":"<p>Returns string representation of the Author model.</p> Source code in <code>comments\\models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Returns string representation of the Author model.\"\"\"\n    return self.username\n</code></pre>"},{"location":"comments/models/#comments.models.Comment","title":"<code>Comment</code>","text":"<p>             Bases: <code>Model</code></p> <p>A model representing a comment.</p> Source code in <code>comments\\models.py</code> <pre><code>class Comment(models.Model):\n    \"\"\"A model representing a comment.\"\"\"\n\n    home_page = models.URLField(\n        blank=True, null=True, verbose_name=\"Home page\"\n    )\n    text = models.TextField(\n        blank=False, null=False, verbose_name=\"Comment body\"\n    )\n    file = models.FileField(\n        upload_to=\"comment_files/\",\n        blank=True,\n        null=True,\n        verbose_name=\"Attached comment file\",\n    )\n    created = models.DateTimeField(\n        auto_now_add=True, verbose_name=\"Created datetime\"\n    )\n\n    parent = models.ForeignKey(\n        \"self\",\n        null=True,\n        blank=True,\n        default=None,\n        on_delete=models.CASCADE,\n        verbose_name=\"Parent comment\",\n    )\n\n    author = models.ForeignKey(\n        Author, on_delete=models.CASCADE, verbose_name=\"Comment author\"\n    )\n\n    objects = _CommentCustomManager()\n\n    def __str__(self) -&gt; str:\n        \"\"\"Returns string representation of the Comment model.\"\"\"\n        return f\"{self.pk} from {self.author}\"\n\n    class Meta:\n        \"\"\"Meta options for the Comment model.\"\"\"\n\n        ordering = [\"-created\"]\n        verbose_name = \"Comment\"\n        verbose_name_plural = \"Comments\"\n</code></pre>"},{"location":"comments/models/#comments.models.Comment.Meta","title":"<code>Meta</code>","text":"<p>Meta options for the Comment model.</p> Source code in <code>comments\\models.py</code> <pre><code>class Meta:\n    \"\"\"Meta options for the Comment model.\"\"\"\n\n    ordering = [\"-created\"]\n    verbose_name = \"Comment\"\n    verbose_name_plural = \"Comments\"\n</code></pre>"},{"location":"comments/models/#comments.models.Comment.__str__","title":"<code>__str__()</code>","text":"<p>Returns string representation of the Comment model.</p> Source code in <code>comments\\models.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Returns string representation of the Comment model.\"\"\"\n    return f\"{self.pk} from {self.author}\"\n</code></pre>"},{"location":"comments/services/","title":"services.py","text":""},{"location":"comments/services/#comments.services.get_ordering_string","title":"<code>get_ordering_string(order_by, order_dir)</code>","text":"<p>Returns ordering string or None after checking the given GET parameters.</p> Source code in <code>comments\\services.py</code> <pre><code>def get_ordering_string(order_by: str, order_dir: str) -&gt; str | None:\n    \"\"\"\n    Returns ordering string or None after checking the given GET parameters.\n    \"\"\"\n    if _are_ordering_parameters_valid(order_by, order_dir):\n        return _get_order_symbol_by_(order_dir) + _get_correct_(order_by)\n    return None\n</code></pre>"},{"location":"comments/urls/","title":"urls.py","text":""},{"location":"comments/views/","title":"views.py","text":""},{"location":"comments/views/#comments.views.CommentCreateView","title":"<code>CommentCreateView</code>","text":"<p>             Bases: <code>BaseView</code>, <code>CreateView</code></p> <p>View for handling only POST request and creating a comment.</p> Source code in <code>comments\\views.py</code> <pre><code>class CommentCreateView(BaseView, generic.CreateView):\n    \"\"\"View for handling only POST request and creating a comment.\"\"\"\n\n    model = Comment\n    success_url = \"/\"\n    http_method_names = [\"post\"]\n    form_class = CommentModelForm\n\n    def form_valid(self, form: CommentModelForm) -&gt; http.HttpResponseRedirect:\n        \"\"\"Saves the form,\n        adds the success message and returns redirect to the success_url.\"\"\"\n        comment_parent_id = self.request.POST.get(\"comment_parent_id\", None)\n        canvas_url = self.request.POST.get(\"resized_image\", None)\n        form.save(comment_parent_id, canvas_url)\n\n        s = \"comment\" if not comment_parent_id else \"answer\"\n        messages.success(self.request, f\"Your {s} has successfully added.\")\n        return http.HttpResponseRedirect(self.success_url)\n\n    def form_invalid(\n        self, form: CommentModelForm\n    ) -&gt; http.HttpResponseRedirect:\n        \"\"\"Adds error message and returns redirect to the success_url.\"\"\"\n        global FORM_DATA\n        FORM_DATA = self.request.POST\n\n        messages.error(self.request, \"Invalid form data.\")\n        return http.HttpResponseRedirect(self.success_url)\n</code></pre>"},{"location":"comments/views/#comments.views.CommentCreateView.form_invalid","title":"<code>form_invalid(form)</code>","text":"<p>Adds error message and returns redirect to the success_url.</p> Source code in <code>comments\\views.py</code> <pre><code>def form_invalid(\n    self, form: CommentModelForm\n) -&gt; http.HttpResponseRedirect:\n    \"\"\"Adds error message and returns redirect to the success_url.\"\"\"\n    global FORM_DATA\n    FORM_DATA = self.request.POST\n\n    messages.error(self.request, \"Invalid form data.\")\n    return http.HttpResponseRedirect(self.success_url)\n</code></pre>"},{"location":"comments/views/#comments.views.CommentCreateView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Saves the form, adds the success message and returns redirect to the success_url.</p> Source code in <code>comments\\views.py</code> <pre><code>def form_valid(self, form: CommentModelForm) -&gt; http.HttpResponseRedirect:\n    \"\"\"Saves the form,\n    adds the success message and returns redirect to the success_url.\"\"\"\n    comment_parent_id = self.request.POST.get(\"comment_parent_id\", None)\n    canvas_url = self.request.POST.get(\"resized_image\", None)\n    form.save(comment_parent_id, canvas_url)\n\n    s = \"comment\" if not comment_parent_id else \"answer\"\n    messages.success(self.request, f\"Your {s} has successfully added.\")\n    return http.HttpResponseRedirect(self.success_url)\n</code></pre>"},{"location":"comments/views/#comments.views.CommentListView","title":"<code>CommentListView</code>","text":"<p>             Bases: <code>BaseView</code>, <code>ListView</code></p> <p>View for displaying all comments.</p> Source code in <code>comments\\views.py</code> <pre><code>class CommentListView(BaseView, generic.ListView):\n    \"\"\"View for displaying all comments.\"\"\"\n\n    paginate_by = 25\n    queryset = Comment.objects.all().filter(parent_id__isnull=True)\n\n    def get(\n        self, request: http.HttpRequest, *args: Any, **kwargs: Any\n    ) -&gt; http.HttpResponse | NoReturn:\n        \"\"\"Raises \"Not found\" if ordering is wrong else calls super method.\"\"\"\n        if self.get_ordering() is None:\n            raise http.Http404\n        return super().get(request, *args, **kwargs)\n\n    def get_ordering(self) -&gt; str | None:\n        \"\"\"Returns ordering string or None by the GET parameters.\"\"\"\n        return services.get_ordering_string(\n            self.request.GET.get(\"orderby\") or \"c\",\n            self.request.GET.get(\"orderdir\") or \"desc\",\n        )\n\n    def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n        \"\"\"Adds the form to the context and returns it.\"\"\"\n        global FORM_DATA\n        context = super().get_context_data(**kwargs)\n        context[\"form\"] = CommentModelForm(FORM_DATA or None)\n        FORM_DATA = {}\n        return context\n</code></pre>"},{"location":"comments/views/#comments.views.CommentListView.get","title":"<code>get(request, *args, **kwargs)</code>","text":"<p>Raises \"Not found\" if ordering is wrong else calls super method.</p> Source code in <code>comments\\views.py</code> <pre><code>def get(\n    self, request: http.HttpRequest, *args: Any, **kwargs: Any\n) -&gt; http.HttpResponse | NoReturn:\n    \"\"\"Raises \"Not found\" if ordering is wrong else calls super method.\"\"\"\n    if self.get_ordering() is None:\n        raise http.Http404\n    return super().get(request, *args, **kwargs)\n</code></pre>"},{"location":"comments/views/#comments.views.CommentListView.get_context_data","title":"<code>get_context_data(**kwargs)</code>","text":"<p>Adds the form to the context and returns it.</p> Source code in <code>comments\\views.py</code> <pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"Adds the form to the context and returns it.\"\"\"\n    global FORM_DATA\n    context = super().get_context_data(**kwargs)\n    context[\"form\"] = CommentModelForm(FORM_DATA or None)\n    FORM_DATA = {}\n    return context\n</code></pre>"},{"location":"comments/views/#comments.views.CommentListView.get_ordering","title":"<code>get_ordering()</code>","text":"<p>Returns ordering string or None by the GET parameters.</p> Source code in <code>comments\\views.py</code> <pre><code>def get_ordering(self) -&gt; str | None:\n    \"\"\"Returns ordering string or None by the GET parameters.\"\"\"\n    return services.get_ordering_string(\n        self.request.GET.get(\"orderby\") or \"c\",\n        self.request.GET.get(\"orderdir\") or \"desc\",\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/","title":"test_forms.py","text":""},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase","title":"<code>CommentModelFormSimpleTestCase</code>","text":"<p>             Bases: <code>SimpleTestCase</code></p> <p>Tests for the CommentModelForm.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>class CommentModelFormSimpleTestCase(SimpleTestCase):\n    \"\"\"Tests for the CommentModelForm.\"\"\"\n\n    @classmethod\n    def setUpClass(cls) -&gt; None:\n        \"\"\"Set up the CommentModelForm for testing.\"\"\"\n        super().setUpClass()\n        cls.form = CommentModelForm()\n\n    # * ---------- Testing the meta options of the CommentModelForm -----------\n\n    def test_form_model(self):\n        \"\"\"Tests the form model.\"\"\"\n        self.assertEqual(self.form._meta.model, Comment)\n\n    def test_form_fields(self):\n        \"\"\"Tests the form fields.\"\"\"\n        self.assertEqual(\n            tuple(self.form._meta.fields),\n            (\"username\", \"email\", \"home_page\", \"captcha\", \"text\", \"file\"),\n        )\n\n    def test_home_page_label(self):\n        \"\"\"Tests the home page label.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"home_page\"].label, \"Home page (optional)\"\n        )\n\n    def test_file_label(self):\n        \"\"\"Tests the file label.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"file\"].label, \"Attached comment file (optional)\"\n        )\n\n    def test_home_page_widget(self):\n        \"\"\"Tests the home page widget.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"home_page\"].widget, forms.URLInput\n        )\n\n    def test_home_page_widget_attrs_class(self):\n        \"\"\"Tests the home page widget attrs class.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"home_page\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    def test_text_widget(self):\n        \"\"\"Tests the text widget.\"\"\"\n        self.assertIsInstance(self.form.fields[\"text\"].widget, forms.Textarea)\n\n    def test_text_widget_attrs_class(self):\n        \"\"\"Tests the home page widget attrs class.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"home_page\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    def test_file_widget(self):\n        \"\"\"Tests the file widget.\"\"\"\n        self.assertIsInstance(self.form.fields[\"file\"].widget, forms.FileInput)\n\n    def test_file_widget_attrs_class(self):\n        \"\"\"Tests the file widget attrs class.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"file\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    def test_file_widget_attrs_accept(self):\n        \"\"\"Tests the file widget attrs accept.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"file\"].widget.attrs[\"accept\"],\n            \".jpg, .jpeg, .gif, .png, .txt\",\n        )\n\n    # * ---------------- Test the 'username' field parameters -----------------\n\n    def test_username_max_length(self):\n        \"\"\"Tests the username max length.\"\"\"\n        self.assertEqual(self.form.fields[\"username\"].max_length, 100)\n\n    def test_username_min_length(self):\n        \"\"\"Tests the username min length.\"\"\"\n        self.assertEqual(self.form.fields[\"username\"].min_length, 2)\n\n    def test_username_required(self):\n        \"\"\"Tests the username required.\"\"\"\n        self.assertTrue(self.form.fields[\"username\"].required)\n\n    def test_username_validator(self):\n        \"\"\"Tests the username validator.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"username\"].validators[0],\n            UnicodeUsernameValidator,\n        )\n\n    def test_username_widget(self):\n        \"\"\"Tests the username widget.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"username\"].widget, forms.TextInput\n        )\n\n    def test_username_widget_attrs_class(self):\n        \"\"\"Tests the username widget attrs class.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"username\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    # * ---------------- Test the 'email' field parameters --------------------\n\n    def test_email_required(self):\n        \"\"\"Tests the email required.\"\"\"\n        self.assertTrue(self.form.fields[\"email\"].required)\n\n    def test_email_widget(self):\n        \"\"\"Tests the email widget.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"email\"].widget,\n            forms.EmailInput,\n        )\n\n    def test_email_widget_attrs_class(self):\n        \"\"\"Tests the email widget attrs class.\"\"\"\n        self.assertEqual(\n            self.form.fields[\"email\"].widget.attrs[\"class\"],\n            FIELD_WIDGET_CLASS,\n        )\n\n    # * ---------------- Test the 'captcha' field parameters ------------------\n\n    def test_captcha_widget(self):\n        \"\"\"Tests the captcha widget.\"\"\"\n        self.assertIsInstance(\n            self.form.fields[\"captcha\"].widget, CaptchaTextInput\n        )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.setUpClass","title":"<code>setUpClass()</code>  <code>classmethod</code>","text":"<p>Set up the CommentModelForm for testing.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>@classmethod\ndef setUpClass(cls) -&gt; None:\n    \"\"\"Set up the CommentModelForm for testing.\"\"\"\n    super().setUpClass()\n    cls.form = CommentModelForm()\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_captcha_widget","title":"<code>test_captcha_widget()</code>","text":"<p>Tests the captcha widget.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_captcha_widget(self):\n    \"\"\"Tests the captcha widget.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"captcha\"].widget, CaptchaTextInput\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_email_required","title":"<code>test_email_required()</code>","text":"<p>Tests the email required.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_email_required(self):\n    \"\"\"Tests the email required.\"\"\"\n    self.assertTrue(self.form.fields[\"email\"].required)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_email_widget","title":"<code>test_email_widget()</code>","text":"<p>Tests the email widget.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_email_widget(self):\n    \"\"\"Tests the email widget.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"email\"].widget,\n        forms.EmailInput,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_email_widget_attrs_class","title":"<code>test_email_widget_attrs_class()</code>","text":"<p>Tests the email widget attrs class.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_email_widget_attrs_class(self):\n    \"\"\"Tests the email widget attrs class.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"email\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_file_label","title":"<code>test_file_label()</code>","text":"<p>Tests the file label.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_file_label(self):\n    \"\"\"Tests the file label.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"file\"].label, \"Attached comment file (optional)\"\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_file_widget","title":"<code>test_file_widget()</code>","text":"<p>Tests the file widget.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_file_widget(self):\n    \"\"\"Tests the file widget.\"\"\"\n    self.assertIsInstance(self.form.fields[\"file\"].widget, forms.FileInput)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_file_widget_attrs_accept","title":"<code>test_file_widget_attrs_accept()</code>","text":"<p>Tests the file widget attrs accept.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_file_widget_attrs_accept(self):\n    \"\"\"Tests the file widget attrs accept.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"file\"].widget.attrs[\"accept\"],\n        \".jpg, .jpeg, .gif, .png, .txt\",\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_file_widget_attrs_class","title":"<code>test_file_widget_attrs_class()</code>","text":"<p>Tests the file widget attrs class.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_file_widget_attrs_class(self):\n    \"\"\"Tests the file widget attrs class.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"file\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_form_fields","title":"<code>test_form_fields()</code>","text":"<p>Tests the form fields.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_form_fields(self):\n    \"\"\"Tests the form fields.\"\"\"\n    self.assertEqual(\n        tuple(self.form._meta.fields),\n        (\"username\", \"email\", \"home_page\", \"captcha\", \"text\", \"file\"),\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_form_model","title":"<code>test_form_model()</code>","text":"<p>Tests the form model.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_form_model(self):\n    \"\"\"Tests the form model.\"\"\"\n    self.assertEqual(self.form._meta.model, Comment)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_home_page_label","title":"<code>test_home_page_label()</code>","text":"<p>Tests the home page label.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_home_page_label(self):\n    \"\"\"Tests the home page label.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"home_page\"].label, \"Home page (optional)\"\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_home_page_widget","title":"<code>test_home_page_widget()</code>","text":"<p>Tests the home page widget.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_home_page_widget(self):\n    \"\"\"Tests the home page widget.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"home_page\"].widget, forms.URLInput\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_home_page_widget_attrs_class","title":"<code>test_home_page_widget_attrs_class()</code>","text":"<p>Tests the home page widget attrs class.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_home_page_widget_attrs_class(self):\n    \"\"\"Tests the home page widget attrs class.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"home_page\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_text_widget","title":"<code>test_text_widget()</code>","text":"<p>Tests the text widget.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_text_widget(self):\n    \"\"\"Tests the text widget.\"\"\"\n    self.assertIsInstance(self.form.fields[\"text\"].widget, forms.Textarea)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_text_widget_attrs_class","title":"<code>test_text_widget_attrs_class()</code>","text":"<p>Tests the home page widget attrs class.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_text_widget_attrs_class(self):\n    \"\"\"Tests the home page widget attrs class.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"home_page\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_max_length","title":"<code>test_username_max_length()</code>","text":"<p>Tests the username max length.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_max_length(self):\n    \"\"\"Tests the username max length.\"\"\"\n    self.assertEqual(self.form.fields[\"username\"].max_length, 100)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_min_length","title":"<code>test_username_min_length()</code>","text":"<p>Tests the username min length.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_min_length(self):\n    \"\"\"Tests the username min length.\"\"\"\n    self.assertEqual(self.form.fields[\"username\"].min_length, 2)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_required","title":"<code>test_username_required()</code>","text":"<p>Tests the username required.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_required(self):\n    \"\"\"Tests the username required.\"\"\"\n    self.assertTrue(self.form.fields[\"username\"].required)\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_validator","title":"<code>test_username_validator()</code>","text":"<p>Tests the username validator.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_validator(self):\n    \"\"\"Tests the username validator.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"username\"].validators[0],\n        UnicodeUsernameValidator,\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_widget","title":"<code>test_username_widget()</code>","text":"<p>Tests the username widget.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_widget(self):\n    \"\"\"Tests the username widget.\"\"\"\n    self.assertIsInstance(\n        self.form.fields[\"username\"].widget, forms.TextInput\n    )\n</code></pre>"},{"location":"comments/tests/test_forms/#comments.tests.test_forms.CommentModelFormSimpleTestCase.test_username_widget_attrs_class","title":"<code>test_username_widget_attrs_class()</code>","text":"<p>Tests the username widget attrs class.</p> Source code in <code>comments\\tests\\test_forms.py</code> <pre><code>def test_username_widget_attrs_class(self):\n    \"\"\"Tests the username widget attrs class.\"\"\"\n    self.assertEqual(\n        self.form.fields[\"username\"].widget.attrs[\"class\"],\n        FIELD_WIDGET_CLASS,\n    )\n</code></pre>"},{"location":"comments/tests/test_models/","title":"test_models.py","text":""},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase","title":"<code>AuthorModelTestCase</code>","text":"<p>             Bases: <code>_ModelMetaOptionsTestMixin</code>, <code>TestCase</code></p> <p>Tests for the Author model.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>class AuthorModelTestCase(_ModelMetaOptionsTestMixin, TestCase):\n    \"\"\"Tests for the Author model.\"\"\"\n\n    model = Author\n    ordering = [\"username\"]\n    verbose_name = \"Comment author\"\n    verbose_name_plural = \"Comment authors\"\n\n    @classmethod\n    def setUpTestData(cls) -&gt; None:\n        \"\"\"Creates the first Author for testing.\"\"\"\n        Author.objects.create(username=\"test_user\", email=\"test@gmail.com\")\n\n    def test_model_string_representation(self):\n        \"\"\"Test the model string representation by __str__.\"\"\"\n        obj = self.model.objects.first()\n        self.assertEqual(str(obj), obj.username)\n\n    # * ---------------- Test the 'username' field parameters -----------------\n\n    def test_username_max_length(self):\n        \"\"\"Tests that the username field has max_length=100.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"username\").max_length, 100\n        )\n\n    def test_username_unique(self):\n        \"\"\"Tests that the username field is unique=False.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"username\").unique)\n\n    def test_username_blank(self):\n        \"\"\"Tests that the username field is blank=False.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"username\").blank)\n\n    def test_username_null(self):\n        \"\"\"Tests that the username field is null=False.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"username\").null)\n\n    def test_username_verbose_name(self):\n        \"\"\"Tests that the username field has verbose_name='Username'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"username\").verbose_name, \"Username\"\n        )\n\n    # * ----------------- Test the 'email' field parameters -------------------\n\n    def test_email_unique(self):\n        \"\"\"Tests that the email field is unique=False.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"email\").unique)\n\n    def test_email_blank(self):\n        \"\"\"Tests that the email field is blank=False.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"email\").blank)\n\n    def test_email_null(self):\n        \"\"\"Tests that the email field is null=False.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"email\").null)\n\n    def test_email_verbose_name(self):\n        \"\"\"Tests that the email field has verbose_name='Email address'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"email\").verbose_name, \"Email address\"\n        )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.setUpTestData","title":"<code>setUpTestData()</code>  <code>classmethod</code>","text":"<p>Creates the first Author for testing.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls) -&gt; None:\n    \"\"\"Creates the first Author for testing.\"\"\"\n    Author.objects.create(username=\"test_user\", email=\"test@gmail.com\")\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_email_blank","title":"<code>test_email_blank()</code>","text":"<p>Tests that the email field is blank=False.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_email_blank(self):\n    \"\"\"Tests that the email field is blank=False.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"email\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_email_null","title":"<code>test_email_null()</code>","text":"<p>Tests that the email field is null=False.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_email_null(self):\n    \"\"\"Tests that the email field is null=False.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"email\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_email_unique","title":"<code>test_email_unique()</code>","text":"<p>Tests that the email field is unique=False.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_email_unique(self):\n    \"\"\"Tests that the email field is unique=False.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"email\").unique)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_email_verbose_name","title":"<code>test_email_verbose_name()</code>","text":"<p>Tests that the email field has verbose_name='Email address'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_email_verbose_name(self):\n    \"\"\"Tests that the email field has verbose_name='Email address'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"email\").verbose_name, \"Email address\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_model_string_representation","title":"<code>test_model_string_representation()</code>","text":"<p>Test the model string representation by str.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_model_string_representation(self):\n    \"\"\"Test the model string representation by __str__.\"\"\"\n    obj = self.model.objects.first()\n    self.assertEqual(str(obj), obj.username)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_blank","title":"<code>test_username_blank()</code>","text":"<p>Tests that the username field is blank=False.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_blank(self):\n    \"\"\"Tests that the username field is blank=False.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"username\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_max_length","title":"<code>test_username_max_length()</code>","text":"<p>Tests that the username field has max_length=100.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_max_length(self):\n    \"\"\"Tests that the username field has max_length=100.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"username\").max_length, 100\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_null","title":"<code>test_username_null()</code>","text":"<p>Tests that the username field is null=False.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_null(self):\n    \"\"\"Tests that the username field is null=False.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"username\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_unique","title":"<code>test_username_unique()</code>","text":"<p>Tests that the username field is unique=False.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_unique(self):\n    \"\"\"Tests that the username field is unique=False.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"username\").unique)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.AuthorModelTestCase.test_username_verbose_name","title":"<code>test_username_verbose_name()</code>","text":"<p>Tests that the username field has verbose_name='Username'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_username_verbose_name(self):\n    \"\"\"Tests that the username field has verbose_name='Username'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"username\").verbose_name, \"Username\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase","title":"<code>CommentModelTestCase</code>","text":"<p>             Bases: <code>_ModelMetaOptionsTestMixin</code>, <code>TestCase</code></p> <p>Tests for the Comment model.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>class CommentModelTestCase(_ModelMetaOptionsTestMixin, TestCase):\n    \"\"\"Tests for the Comment model.\"\"\"\n\n    model = Comment\n    ordering = [\"-created\"]\n    verbose_name = \"Comment\"\n    verbose_name_plural = \"Comments\"\n\n    @classmethod\n    def setUpTestData(cls) -&gt; None:\n        \"\"\"Creates the first Comment for testing.\"\"\"\n        cls.author = Author.objects.create(\n            username=\"test_user\", email=\"test@gmail.com\"\n        )\n        Comment.objects.create(\n            text=\"test comment\", author=cls.author, parent=None\n        )\n\n    def test_model_string_representation(self):\n        \"\"\"Test the model string representation by __str__.\"\"\"\n        obj = self.model.objects.first()\n        self.assertEqual(str(obj), f\"{obj.pk} from {obj.author}\")\n\n    # * ---------------- Test the 'home_page' field parameters ----------------\n\n    def test_home_page_blank(self):\n        \"\"\"Tests that the home_page field is blank=True.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"home_page\").blank)\n\n    def test_home_page_null(self):\n        \"\"\"Tests that the home_page field is null=True.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"home_page\").null)\n\n    def test_home_page_verbose_name(self):\n        \"\"\"Tests that the home_page field has verbose_name='Home page'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"home_page\").verbose_name, \"Home page\"\n        )\n\n    # * ---------------- Test the 'text' field parameters ---------------------\n\n    def test_text_blank(self):\n        \"\"\"Tests that the text field is blank=False.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"text\").blank)\n\n    def test_text_null(self):\n        \"\"\"Tests that the text field is null=False.\"\"\"\n        self.assertFalse(self.model._meta.get_field(\"text\").null)\n\n    def test_text_verbose_name(self):\n        \"\"\"Tests that the text field has verbose_name='Comment body'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"text\").verbose_name, \"Comment body\"\n        )\n\n    # * ----------------- Test the 'file' field parameters --------------------\n\n    def test_file_upload_to(self):\n        \"\"\"Tests that the file field has upload_to='comment_files/'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"file\").upload_to, \"comment_files/\"\n        )\n\n    def test_file_blank(self):\n        \"\"\"Tests that the file field is blank=True.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"file\").blank)\n\n    def test_file_null(self):\n        \"\"\"Tests that the file field is null=True.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"file\").null)\n\n    def test_file_verbose_name(self):\n        \"\"\"Tests that the file field has verbose_name='Attached comment file'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"file\").verbose_name,\n            \"Attached comment file\",\n        )\n\n    # * ---------------- Test the 'created' field parameters ------------------\n\n    def test_created_auto_now_add(self):\n        \"\"\"Tests that the created field has auto_now_add=True.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"created\").auto_now_add)\n\n    def test_created_verbose_name(self):\n        \"\"\"Tests that the created field has verbose_name='Created datetime'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"created\").verbose_name,\n            \"Created datetime\",\n        )\n\n    # * ---------------- Test the 'parent' field parameters -------------------\n\n    def test_parent_null(self):\n        \"\"\"Tests that the parent field is null=True.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"parent\").null)\n\n    def test_parent_blank(self):\n        \"\"\"Tests that the parent field is blank=True.\"\"\"\n        self.assertTrue(self.model._meta.get_field(\"parent\").blank)\n\n    def test_parent_default(self):\n        \"\"\"Tests that the parent field has default=None.\"\"\"\n        self.assertIsNone(self.model._meta.get_field(\"parent\").default)\n\n    def test_parent_verbose_name(self):\n        \"\"\"Tests that the parent field has verbose_name='Parent comment'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"parent\").verbose_name, \"Parent comment\"\n        )\n\n    def test_parent_on_delete(self):\n        \"\"\"Tests that the parent field on_delete is CASCADE.\"\"\"\n        Comment.objects.get(id=1).delete()\n        with self.assertRaises(Comment.DoesNotExist):\n            Comment.objects.get(id=1)\n\n    # * ---------------- Test the 'author' field parameters -------------------\n\n    def test_author_verbose_name(self):\n        \"\"\"Tests that the author field has verbose_name='Comment author'.\"\"\"\n        self.assertEqual(\n            self.model._meta.get_field(\"author\").verbose_name, \"Comment author\"\n        )\n\n    def test_author_on_delete(self):\n        \"\"\"Tests that the author field on_delete is CASCADE.\"\"\"\n        Comment.objects.get(id=1).delete()\n        with self.assertRaises(Comment.DoesNotExist):\n            Comment.objects.get(id=1)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.setUpTestData","title":"<code>setUpTestData()</code>  <code>classmethod</code>","text":"<p>Creates the first Comment for testing.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>@classmethod\ndef setUpTestData(cls) -&gt; None:\n    \"\"\"Creates the first Comment for testing.\"\"\"\n    cls.author = Author.objects.create(\n        username=\"test_user\", email=\"test@gmail.com\"\n    )\n    Comment.objects.create(\n        text=\"test comment\", author=cls.author, parent=None\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_author_on_delete","title":"<code>test_author_on_delete()</code>","text":"<p>Tests that the author field on_delete is CASCADE.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_author_on_delete(self):\n    \"\"\"Tests that the author field on_delete is CASCADE.\"\"\"\n    Comment.objects.get(id=1).delete()\n    with self.assertRaises(Comment.DoesNotExist):\n        Comment.objects.get(id=1)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_author_verbose_name","title":"<code>test_author_verbose_name()</code>","text":"<p>Tests that the author field has verbose_name='Comment author'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_author_verbose_name(self):\n    \"\"\"Tests that the author field has verbose_name='Comment author'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"author\").verbose_name, \"Comment author\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_created_auto_now_add","title":"<code>test_created_auto_now_add()</code>","text":"<p>Tests that the created field has auto_now_add=True.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_created_auto_now_add(self):\n    \"\"\"Tests that the created field has auto_now_add=True.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"created\").auto_now_add)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_created_verbose_name","title":"<code>test_created_verbose_name()</code>","text":"<p>Tests that the created field has verbose_name='Created datetime'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_created_verbose_name(self):\n    \"\"\"Tests that the created field has verbose_name='Created datetime'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"created\").verbose_name,\n        \"Created datetime\",\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_file_blank","title":"<code>test_file_blank()</code>","text":"<p>Tests that the file field is blank=True.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_file_blank(self):\n    \"\"\"Tests that the file field is blank=True.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"file\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_file_null","title":"<code>test_file_null()</code>","text":"<p>Tests that the file field is null=True.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_file_null(self):\n    \"\"\"Tests that the file field is null=True.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"file\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_file_upload_to","title":"<code>test_file_upload_to()</code>","text":"<p>Tests that the file field has upload_to='comment_files/'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_file_upload_to(self):\n    \"\"\"Tests that the file field has upload_to='comment_files/'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"file\").upload_to, \"comment_files/\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_file_verbose_name","title":"<code>test_file_verbose_name()</code>","text":"<p>Tests that the file field has verbose_name='Attached comment file'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_file_verbose_name(self):\n    \"\"\"Tests that the file field has verbose_name='Attached comment file'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"file\").verbose_name,\n        \"Attached comment file\",\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_home_page_blank","title":"<code>test_home_page_blank()</code>","text":"<p>Tests that the home_page field is blank=True.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_home_page_blank(self):\n    \"\"\"Tests that the home_page field is blank=True.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"home_page\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_home_page_null","title":"<code>test_home_page_null()</code>","text":"<p>Tests that the home_page field is null=True.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_home_page_null(self):\n    \"\"\"Tests that the home_page field is null=True.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"home_page\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_home_page_verbose_name","title":"<code>test_home_page_verbose_name()</code>","text":"<p>Tests that the home_page field has verbose_name='Home page'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_home_page_verbose_name(self):\n    \"\"\"Tests that the home_page field has verbose_name='Home page'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"home_page\").verbose_name, \"Home page\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_model_string_representation","title":"<code>test_model_string_representation()</code>","text":"<p>Test the model string representation by str.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_model_string_representation(self):\n    \"\"\"Test the model string representation by __str__.\"\"\"\n    obj = self.model.objects.first()\n    self.assertEqual(str(obj), f\"{obj.pk} from {obj.author}\")\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_blank","title":"<code>test_parent_blank()</code>","text":"<p>Tests that the parent field is blank=True.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_blank(self):\n    \"\"\"Tests that the parent field is blank=True.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"parent\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_default","title":"<code>test_parent_default()</code>","text":"<p>Tests that the parent field has default=None.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_default(self):\n    \"\"\"Tests that the parent field has default=None.\"\"\"\n    self.assertIsNone(self.model._meta.get_field(\"parent\").default)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_null","title":"<code>test_parent_null()</code>","text":"<p>Tests that the parent field is null=True.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_null(self):\n    \"\"\"Tests that the parent field is null=True.\"\"\"\n    self.assertTrue(self.model._meta.get_field(\"parent\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_on_delete","title":"<code>test_parent_on_delete()</code>","text":"<p>Tests that the parent field on_delete is CASCADE.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_on_delete(self):\n    \"\"\"Tests that the parent field on_delete is CASCADE.\"\"\"\n    Comment.objects.get(id=1).delete()\n    with self.assertRaises(Comment.DoesNotExist):\n        Comment.objects.get(id=1)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_parent_verbose_name","title":"<code>test_parent_verbose_name()</code>","text":"<p>Tests that the parent field has verbose_name='Parent comment'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_parent_verbose_name(self):\n    \"\"\"Tests that the parent field has verbose_name='Parent comment'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"parent\").verbose_name, \"Parent comment\"\n    )\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_text_blank","title":"<code>test_text_blank()</code>","text":"<p>Tests that the text field is blank=False.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_text_blank(self):\n    \"\"\"Tests that the text field is blank=False.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"text\").blank)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_text_null","title":"<code>test_text_null()</code>","text":"<p>Tests that the text field is null=False.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_text_null(self):\n    \"\"\"Tests that the text field is null=False.\"\"\"\n    self.assertFalse(self.model._meta.get_field(\"text\").null)\n</code></pre>"},{"location":"comments/tests/test_models/#comments.tests.test_models.CommentModelTestCase.test_text_verbose_name","title":"<code>test_text_verbose_name()</code>","text":"<p>Tests that the text field has verbose_name='Comment body'.</p> Source code in <code>comments\\tests\\test_models.py</code> <pre><code>def test_text_verbose_name(self):\n    \"\"\"Tests that the text field has verbose_name='Comment body'.\"\"\"\n    self.assertEqual(\n        self.model._meta.get_field(\"text\").verbose_name, \"Comment body\"\n    )\n</code></pre>"},{"location":"comments/tests/test_views/","title":"test_views.py","text":""},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase","title":"<code>CommentCreateViewTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>Tests for the CommentCreateView.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>class CommentCreateViewTestCase(TestCase):\n    \"\"\"Tests for the CommentCreateView.\"\"\"\n\n    url = \"/add/\"\n\n    def test_405_with_get_request(self):\n        \"\"\"Tests that the view returns 404 with GET request.\"\"\"\n        response = self.client.get(self.url)\n        self.assertEqual(response.status_code, 405)\n\n    def test_adding_comment_with_valid_form_data(self):\n        \"\"\"Tests adding a comment with valid form data.\"\"\"\n        response = self._test_comment_form_for_validity_and_get_response(\n            self._get_valid_form_data()\n        )\n        self.assertContains(response, \"Your comment has successfully added.\")\n\n    def test_adding_comment_with_invalid_form_data(self):\n        \"\"\"Tests adding a comment with invalid form data.\"\"\"\n        form_data = self._get_valid_form_data()\n        form_data[\"username\"] = \"test user\"\n        response = self._test_comment_form_for_validity_and_get_response(\n            form_data, is_valid=False\n        )\n        self.assertContains(response, \"Invalid form data.\")\n\n    def test_adding_answer_with_valid_form_data(self):\n        \"\"\"Tests adding an answer with valid form data.\"\"\"\n        comment = Comment.objects.create(\n            text=f\"Tests comment\",\n            author=Author.objects.create(\n                username=f\"test_user\",\n                email=f\"test_user@gmail.com\",\n            ),\n        )\n        form_data = self._get_valid_form_data()\n        form_data[\"comment_parent_id\"] = comment.id\n        response = self._test_comment_form_for_validity_and_get_response(\n            form_data\n        )\n        self.assertContains(response, \"Your answer has successfully added.\")\n\n    def test_404_with_nonexistent_parent_id(self):\n        \"\"\"Tests that the view returns 404 with nonexistent parent_id.\"\"\"\n        # ! I think it's valid test, but it returns 405.\n        # form_data = self._get_valid_form_data()\n        # form_data[\"comment_parent_id\"] = 100\n        # response = self._test_comment_form_for_validity_and_get_response(\n        #     form_data, is_valid=False, status_code=404\n        # )\n        # self.assertContains(response, \"Not Found\")\n\n    def _get_valid_form_data(self) -&gt; dict:\n        \"\"\"Returns valid form data.\"\"\"\n        return {\n            \"username\": \"test_user\",\n            \"email\": \"test_user@gmail.com\",\n            \"text\": \"Test comment\",\n        }\n\n    def _test_comment_form_for_validity_and_get_response(\n        self, form_data: dict, is_valid: bool = True, status_code: int = 200\n    ) -&gt; HttpResponse:\n        \"\"\"Tests that the form is valid or invalid\n        by the given form_data and returns the response.\"\"\"\n        self.assertTrue(\n            CommentModelForm(form_data).is_valid()\n        ) if is_valid else self.assertFalse(\n            CommentModelForm(form_data).is_valid()\n        )\n        response = self.client.post(\n            self.url, data=form_data, follow=True  # follow redirects\n        )\n        self.assertEqual(response.status_code, status_code)\n        return response\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_404_with_nonexistent_parent_id","title":"<code>test_404_with_nonexistent_parent_id()</code>","text":"<p>Tests that the view returns 404 with nonexistent parent_id.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_404_with_nonexistent_parent_id(self):\n    \"\"\"Tests that the view returns 404 with nonexistent parent_id.\"\"\"\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_405_with_get_request","title":"<code>test_405_with_get_request()</code>","text":"<p>Tests that the view returns 404 with GET request.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_405_with_get_request(self):\n    \"\"\"Tests that the view returns 404 with GET request.\"\"\"\n    response = self.client.get(self.url)\n    self.assertEqual(response.status_code, 405)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_adding_answer_with_valid_form_data","title":"<code>test_adding_answer_with_valid_form_data()</code>","text":"<p>Tests adding an answer with valid form data.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_adding_answer_with_valid_form_data(self):\n    \"\"\"Tests adding an answer with valid form data.\"\"\"\n    comment = Comment.objects.create(\n        text=f\"Tests comment\",\n        author=Author.objects.create(\n            username=f\"test_user\",\n            email=f\"test_user@gmail.com\",\n        ),\n    )\n    form_data = self._get_valid_form_data()\n    form_data[\"comment_parent_id\"] = comment.id\n    response = self._test_comment_form_for_validity_and_get_response(\n        form_data\n    )\n    self.assertContains(response, \"Your answer has successfully added.\")\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_adding_comment_with_invalid_form_data","title":"<code>test_adding_comment_with_invalid_form_data()</code>","text":"<p>Tests adding a comment with invalid form data.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_adding_comment_with_invalid_form_data(self):\n    \"\"\"Tests adding a comment with invalid form data.\"\"\"\n    form_data = self._get_valid_form_data()\n    form_data[\"username\"] = \"test user\"\n    response = self._test_comment_form_for_validity_and_get_response(\n        form_data, is_valid=False\n    )\n    self.assertContains(response, \"Invalid form data.\")\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentCreateViewTestCase.test_adding_comment_with_valid_form_data","title":"<code>test_adding_comment_with_valid_form_data()</code>","text":"<p>Tests adding a comment with valid form data.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_adding_comment_with_valid_form_data(self):\n    \"\"\"Tests adding a comment with valid form data.\"\"\"\n    response = self._test_comment_form_for_validity_and_get_response(\n        self._get_valid_form_data()\n    )\n    self.assertContains(response, \"Your comment has successfully added.\")\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase","title":"<code>CommentListViewTestCase</code>","text":"<p>             Bases: <code>TestCase</code></p> <p>Tests for the CommentListView.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>class CommentListViewTestCase(TestCase):\n    \"\"\"Tests for the CommentListView.\"\"\"\n\n    url = \"/\"\n    name = \"list\"\n    template_name = \"comments/comment_list.html\"\n    queryset = Comment.objects.all().filter(parent_id__isnull=True)\n\n    @classmethod\n    def setUpTestData(cls) -&gt; None:\n        \"\"\"Sets up tests data by creating 28 comments.\"\"\"\n        for count in range(1, 29):\n            Comment.objects.create(\n                text=f\"Tests comment #{count}\",\n                author=Author.objects.create(\n                    username=f\"test_user_{count}\",\n                    email=f\"test_user_{count}@gmail.com\",\n                ),\n            )\n\n    def setUp(self) -&gt; None:\n        \"\"\"Sets up the tests by retrieving a response from the view's URL.\"\"\"\n        self.response = self.client.get(self.url)\n\n    def test_view_url_exists_at_desired_location(self):\n        \"\"\"Tests that the view exists at desired location.\"\"\"\n        self.assertEqual(self.response.status_code, 200)\n\n    def test_view_uses_correct_template(self):\n        \"\"\"Tests that the response in the view uses the correct template.\"\"\"\n        self.assertEqual(self.response.status_code, 200)\n        self.assertTemplateUsed(self.response, self.template_name)\n\n    def test_view_url_accessible_by_name(self):\n        \"\"\"Tests that the view is accessible using its name.\"\"\"\n        response = self.client.get(reverse(self.name))\n        self.assertEqual(response.status_code, 200)\n\n    def test_comment_form_is_in_context(self):\n        \"\"\"Tests that the form is in the context.\"\"\"\n        self.assertIn(\"form\", self.response.context)\n        self.assertIsInstance(self.response.context[\"form\"], CommentModelForm)\n\n    def test_lists_comments(self):\n        \"\"\"Tests that comments are listed on a page.\"\"\"\n        self.assertIn(\"page_obj\", self.response.context)\n        self.assertEqual(\n            self.response.context[\"page_obj\"].object_list,\n            list(self.queryset[:25]),\n        )\n\n    # * ------------------ Testing pagination functionality -------------------\n\n    def test_pagination_is_twenty_five(self):\n        \"\"\"Tests that pagination is set to 25 per page.\"\"\"\n        self.assertEqual(len(self.response.context[\"page_obj\"]), 25)\n\n    def test_paginated_product_list(self):\n        \"\"\"Tests second page has (exactly) remaining 3 comments.\"\"\"\n        response = self.client.get(f\"{self.url}?page=2\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(len(response.context[\"page_obj\"]), 3)\n\n    def test_404_with_invalid_pagination_page_value(self):\n        \"\"\"Tests that invalid pagination page value results in 404\"\"\"\n        response = self.client.get(f\"{self.url}?page=0\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?page=3\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?page=string\")\n        self.assertEqual(response.status_code, 404)\n\n    # * ------------------- Testing ordering functionality --------------------\n\n    def test_lists_comments_ordered_by_created_desc_by_default(self):\n        \"\"\"\n        Tests that comments ordered by created (DESC) by default are listed on a page.\n        \"\"\"\n        self.assertEqual(\n            self.response.context[\"page_obj\"].object_list,\n            list(self.queryset[:25]),\n        )\n\n    def test_lists_comments_ordered_by_created_asc(self):\n        \"\"\"\n        Tests that comments ordered by created (ASC) are listed on a page.\n        \"\"\"\n        response = self.client.get(f\"{self.url}?orderby=c&amp;orderdir=asc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"created\")[:25]),\n        )\n\n    def test_lists_comments_ordered_by_username_asc(self):\n        \"\"\"\n        Tests that comments ordered by username (ASC) are listed on a page.\n        \"\"\"\n        response = self.client.get(f\"{self.url}?orderby=u&amp;orderdir=asc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"author__username\")[:25]),\n        )\n\n    def test_lists_comments_ordered_by_username_desc(self):\n        \"\"\"\n        Tests that comments ordered by username (DESC) are listed on a page.\n        \"\"\"\n        response = self.client.get(f\"{self.url}?orderby=u&amp;orderdir=desc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"-author__username\")[:25]),\n        )\n\n    def test_lists_comments_ordered_by_email_asc(self):\n        \"\"\"Tests that comments ordered by email (ASC) are listed on a page.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=e&amp;orderdir=asc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"author__email\")[:25]),\n        )\n\n    def test_lists_comments_ordered_by_email_desc(self):\n        \"\"\"Tests that comments ordered by email (DESC) are listed on a page.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=e&amp;orderdir=desc\")\n        self.assertEqual(\n            response.context[\"page_obj\"].object_list,\n            list(self.queryset.order_by(\"-author__email\")[:25]),\n        )\n\n    def test_404_with_invalid_order_parameters(self):\n        \"\"\"Tests that invalid order parameters result in 404.\"\"\"\n        response = self.client.get(f\"{self.url}?orderby=wrong&amp;orderdir=asc\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?orderby=c&amp;orderdir=wrong\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?orderby=wrong\")\n        self.assertEqual(response.status_code, 404)\n\n        response = self.client.get(f\"{self.url}?orderdir=wrong\")\n        self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.setUp","title":"<code>setUp()</code>","text":"<p>Sets up the tests by retrieving a response from the view's URL.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def setUp(self) -&gt; None:\n    \"\"\"Sets up the tests by retrieving a response from the view's URL.\"\"\"\n    self.response = self.client.get(self.url)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.setUpTestData","title":"<code>setUpTestData()</code>  <code>classmethod</code>","text":"<p>Sets up tests data by creating 28 comments.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>@classmethod\ndef setUpTestData(cls) -&gt; None:\n    \"\"\"Sets up tests data by creating 28 comments.\"\"\"\n    for count in range(1, 29):\n        Comment.objects.create(\n            text=f\"Tests comment #{count}\",\n            author=Author.objects.create(\n                username=f\"test_user_{count}\",\n                email=f\"test_user_{count}@gmail.com\",\n            ),\n        )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_404_with_invalid_order_parameters","title":"<code>test_404_with_invalid_order_parameters()</code>","text":"<p>Tests that invalid order parameters result in 404.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_404_with_invalid_order_parameters(self):\n    \"\"\"Tests that invalid order parameters result in 404.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=wrong&amp;orderdir=asc\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?orderby=c&amp;orderdir=wrong\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?orderby=wrong\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?orderdir=wrong\")\n    self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_404_with_invalid_pagination_page_value","title":"<code>test_404_with_invalid_pagination_page_value()</code>","text":"<p>Tests that invalid pagination page value results in 404</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_404_with_invalid_pagination_page_value(self):\n    \"\"\"Tests that invalid pagination page value results in 404\"\"\"\n    response = self.client.get(f\"{self.url}?page=0\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?page=3\")\n    self.assertEqual(response.status_code, 404)\n\n    response = self.client.get(f\"{self.url}?page=string\")\n    self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_comment_form_is_in_context","title":"<code>test_comment_form_is_in_context()</code>","text":"<p>Tests that the form is in the context.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_comment_form_is_in_context(self):\n    \"\"\"Tests that the form is in the context.\"\"\"\n    self.assertIn(\"form\", self.response.context)\n    self.assertIsInstance(self.response.context[\"form\"], CommentModelForm)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments","title":"<code>test_lists_comments()</code>","text":"<p>Tests that comments are listed on a page.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments(self):\n    \"\"\"Tests that comments are listed on a page.\"\"\"\n    self.assertIn(\"page_obj\", self.response.context)\n    self.assertEqual(\n        self.response.context[\"page_obj\"].object_list,\n        list(self.queryset[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_created_asc","title":"<code>test_lists_comments_ordered_by_created_asc()</code>","text":"<p>Tests that comments ordered by created (ASC) are listed on a page.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_created_asc(self):\n    \"\"\"\n    Tests that comments ordered by created (ASC) are listed on a page.\n    \"\"\"\n    response = self.client.get(f\"{self.url}?orderby=c&amp;orderdir=asc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"created\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_created_desc_by_default","title":"<code>test_lists_comments_ordered_by_created_desc_by_default()</code>","text":"<p>Tests that comments ordered by created (DESC) by default are listed on a page.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_created_desc_by_default(self):\n    \"\"\"\n    Tests that comments ordered by created (DESC) by default are listed on a page.\n    \"\"\"\n    self.assertEqual(\n        self.response.context[\"page_obj\"].object_list,\n        list(self.queryset[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_email_asc","title":"<code>test_lists_comments_ordered_by_email_asc()</code>","text":"<p>Tests that comments ordered by email (ASC) are listed on a page.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_email_asc(self):\n    \"\"\"Tests that comments ordered by email (ASC) are listed on a page.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=e&amp;orderdir=asc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"author__email\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_email_desc","title":"<code>test_lists_comments_ordered_by_email_desc()</code>","text":"<p>Tests that comments ordered by email (DESC) are listed on a page.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_email_desc(self):\n    \"\"\"Tests that comments ordered by email (DESC) are listed on a page.\"\"\"\n    response = self.client.get(f\"{self.url}?orderby=e&amp;orderdir=desc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"-author__email\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_username_asc","title":"<code>test_lists_comments_ordered_by_username_asc()</code>","text":"<p>Tests that comments ordered by username (ASC) are listed on a page.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_username_asc(self):\n    \"\"\"\n    Tests that comments ordered by username (ASC) are listed on a page.\n    \"\"\"\n    response = self.client.get(f\"{self.url}?orderby=u&amp;orderdir=asc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"author__username\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_lists_comments_ordered_by_username_desc","title":"<code>test_lists_comments_ordered_by_username_desc()</code>","text":"<p>Tests that comments ordered by username (DESC) are listed on a page.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_lists_comments_ordered_by_username_desc(self):\n    \"\"\"\n    Tests that comments ordered by username (DESC) are listed on a page.\n    \"\"\"\n    response = self.client.get(f\"{self.url}?orderby=u&amp;orderdir=desc\")\n    self.assertEqual(\n        response.context[\"page_obj\"].object_list,\n        list(self.queryset.order_by(\"-author__username\")[:25]),\n    )\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_paginated_product_list","title":"<code>test_paginated_product_list()</code>","text":"<p>Tests second page has (exactly) remaining 3 comments.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_paginated_product_list(self):\n    \"\"\"Tests second page has (exactly) remaining 3 comments.\"\"\"\n    response = self.client.get(f\"{self.url}?page=2\")\n    self.assertEqual(response.status_code, 200)\n    self.assertEqual(len(response.context[\"page_obj\"]), 3)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_pagination_is_twenty_five","title":"<code>test_pagination_is_twenty_five()</code>","text":"<p>Tests that pagination is set to 25 per page.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_pagination_is_twenty_five(self):\n    \"\"\"Tests that pagination is set to 25 per page.\"\"\"\n    self.assertEqual(len(self.response.context[\"page_obj\"]), 25)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_view_url_accessible_by_name","title":"<code>test_view_url_accessible_by_name()</code>","text":"<p>Tests that the view is accessible using its name.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_view_url_accessible_by_name(self):\n    \"\"\"Tests that the view is accessible using its name.\"\"\"\n    response = self.client.get(reverse(self.name))\n    self.assertEqual(response.status_code, 200)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_view_url_exists_at_desired_location","title":"<code>test_view_url_exists_at_desired_location()</code>","text":"<p>Tests that the view exists at desired location.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_view_url_exists_at_desired_location(self):\n    \"\"\"Tests that the view exists at desired location.\"\"\"\n    self.assertEqual(self.response.status_code, 200)\n</code></pre>"},{"location":"comments/tests/test_views/#comments.tests.test_views.CommentListViewTestCase.test_view_uses_correct_template","title":"<code>test_view_uses_correct_template()</code>","text":"<p>Tests that the response in the view uses the correct template.</p> Source code in <code>comments\\tests\\test_views.py</code> <pre><code>def test_view_uses_correct_template(self):\n    \"\"\"Tests that the response in the view uses the correct template.\"\"\"\n    self.assertEqual(self.response.status_code, 200)\n    self.assertTemplateUsed(self.response, self.template_name)\n</code></pre>"},{"location":"general/error_views/","title":"error_views.py","text":""},{"location":"general/error_views/#general.error_views.CustomBadRequestView","title":"<code>CustomBadRequestView</code>","text":"<p>             Bases: <code>ErrorView</code></p> <p>Custom view for handling the 400 HTTP status code.</p> Source code in <code>general\\error_views.py</code> <pre><code>class CustomBadRequestView(ErrorView):\n    \"\"\"Custom view for handling the 400 HTTP status code.\"\"\"\n\n    code = 400\n    name = \"Bad Request\"\n    description = \"The server cannot or will not process the request.\"\n</code></pre>"},{"location":"general/error_views/#general.error_views.CustomNotFoundView","title":"<code>CustomNotFoundView</code>","text":"<p>             Bases: <code>ErrorView</code></p> <p>Custom view for handling the 404 HTTP status code.</p> Source code in <code>general\\error_views.py</code> <pre><code>class CustomNotFoundView(ErrorView):\n    \"\"\"Custom view for handling the 404 HTTP status code.\"\"\"\n\n    code = 404\n    name = \"Not Found\"\n    description = (\n        \"The server cannot find the requested resource. URL is not recognized.\"\n    )\n</code></pre>"},{"location":"general/error_views/#general.error_views.CustomServerErrorView","title":"<code>CustomServerErrorView</code>","text":"<p>             Bases: <code>ErrorView</code></p> <p>Custom view for handling the 500 HTTP status code.</p> Source code in <code>general\\error_views.py</code> <pre><code>class CustomServerErrorView(ErrorView):\n    \"\"\"Custom view for handling the 500 HTTP status code.\"\"\"\n\n    code = 500\n    name = \"Internal Server Error\"\n    description = \"Sorry, an error occurred in the server. Try again.\"\n</code></pre>"},{"location":"general/error_views/#general.error_views.Error","title":"<code>Error</code>","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Named tuple that holds information about an error.</p> Source code in <code>general\\error_views.py</code> <pre><code>class Error(NamedTuple):\n    \"\"\"Named tuple that holds information about an error.\"\"\"\n\n    code: int\n    name: str\n    description: str\n</code></pre>"},{"location":"general/error_views/#general.error_views.ErrorView","title":"<code>ErrorView</code>","text":"<p>             Bases: <code>View</code></p> <p>Base error view for rendering the custom error page.</p> Source code in <code>general\\error_views.py</code> <pre><code>class ErrorView(View):\n    \"\"\"Base error view for rendering the custom error page.\"\"\"\n\n    code: int\n    name: str\n    description: str\n\n    def get(self, request: HttpRequest, exception=None) -&gt; HttpResponse:\n        \"\"\"Returns the custom error page with the given error information.\"\"\"\n        return render_error_page(\n            request, Error(self.code, self.name, self.description)\n        )\n</code></pre>"},{"location":"general/error_views/#general.error_views.ErrorView.get","title":"<code>get(request, exception=None)</code>","text":"<p>Returns the custom error page with the given error information.</p> Source code in <code>general\\error_views.py</code> <pre><code>def get(self, request: HttpRequest, exception=None) -&gt; HttpResponse:\n    \"\"\"Returns the custom error page with the given error information.\"\"\"\n    return render_error_page(\n        request, Error(self.code, self.name, self.description)\n    )\n</code></pre>"},{"location":"general/error_views/#general.error_views.render_error_page","title":"<code>render_error_page(request, error)</code>","text":"<p>Renders error page (if template exist) by given error.</p> Source code in <code>general\\error_views.py</code> <pre><code>def render_error_page(request: HttpRequest, error: Error) -&gt; HttpResponse:\n    \"\"\"Renders error page (if template exist) by given error.\"\"\"\n    try:\n        return render(\n            request, \"error.html\", {\"error\": error}, status=error.code\n        )\n    except TemplateDoesNotExist:\n        return HttpResponse(\n            f\"\"\"\n            &lt;title&gt;{error.code} | LapZone&lt;/title&gt;\n            &lt;h1&gt;{error.name}&lt;/h1&gt;\n            &lt;h4&gt;{error.description}&lt;/h4&gt;\n            \"\"\",\n            status=error.code,\n        )\n</code></pre>"},{"location":"general/test_error_views/","title":"test_error_views.py","text":""},{"location":"general/test_error_views/#general.test_error_views.CustomBadRequestViewTest","title":"<code>CustomBadRequestViewTest</code>","text":"<p>             Bases: <code>CustomErrorHandlerTestMixin</code>, <code>TestCase</code></p> <p>Tests for CustomBadRequestView.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class CustomBadRequestViewTest(CustomErrorHandlerTestMixin, TestCase):\n    \"\"\"Tests for CustomBadRequestView.\"\"\"\n\n    error_handler = CustomBadRequestView\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin","title":"<code>CustomErrorHandlerTestMixin</code>","text":"<p>Test mixin for custom error handlers.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class CustomErrorHandlerTestMixin:\n    \"\"\"Test mixin for custom error handlers.\"\"\"\n\n    error_handler: ErrorView\n\n    def setUp(self):\n        \"\"\"Gets response with test client by generated url attribute.\"\"\"\n        self.response = self.client.get(f\"/{self.error_handler.code}/\")\n\n    def test_view_status_code(self):\n        \"\"\"Tests response status code matches code attribute.\"\"\"\n        self.assertEqual(self.response.status_code, self.error_handler.code)\n\n    def test_view_template(self):\n        \"\"\"Tests response template matches template_name attribute.\"\"\"\n        self.assertTemplateUsed(self.response, \"error.html\")\n\n    def test_view_content(self):\n        \"\"\"Tests response content.\"\"\"\n        self.assertContains(\n            self.response,\n            self.error_handler.name,\n            status_code=self.error_handler.code,\n        )\n        self.assertContains(\n            self.response,\n            self.error_handler.description,\n            status_code=self.error_handler.code,\n        )\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin.setUp","title":"<code>setUp()</code>","text":"<p>Gets response with test client by generated url attribute.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def setUp(self):\n    \"\"\"Gets response with test client by generated url attribute.\"\"\"\n    self.response = self.client.get(f\"/{self.error_handler.code}/\")\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin.test_view_content","title":"<code>test_view_content()</code>","text":"<p>Tests response content.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def test_view_content(self):\n    \"\"\"Tests response content.\"\"\"\n    self.assertContains(\n        self.response,\n        self.error_handler.name,\n        status_code=self.error_handler.code,\n    )\n    self.assertContains(\n        self.response,\n        self.error_handler.description,\n        status_code=self.error_handler.code,\n    )\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin.test_view_status_code","title":"<code>test_view_status_code()</code>","text":"<p>Tests response status code matches code attribute.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def test_view_status_code(self):\n    \"\"\"Tests response status code matches code attribute.\"\"\"\n    self.assertEqual(self.response.status_code, self.error_handler.code)\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomErrorHandlerTestMixin.test_view_template","title":"<code>test_view_template()</code>","text":"<p>Tests response template matches template_name attribute.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def test_view_template(self):\n    \"\"\"Tests response template matches template_name attribute.\"\"\"\n    self.assertTemplateUsed(self.response, \"error.html\")\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomNotFoundViewTest","title":"<code>CustomNotFoundViewTest</code>","text":"<p>             Bases: <code>CustomErrorHandlerTestMixin</code>, <code>TestCase</code></p> <p>Tests for CustomNotFoundView.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class CustomNotFoundViewTest(CustomErrorHandlerTestMixin, TestCase):\n    \"\"\"Tests for CustomNotFoundView.\"\"\"\n\n    error_handler = CustomNotFoundView\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.CustomServerErrorViewTest","title":"<code>CustomServerErrorViewTest</code>","text":"<p>             Bases: <code>CustomErrorHandlerTestMixin</code>, <code>TestCase</code></p> <p>Tests for CustomServerErrorView.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class CustomServerErrorViewTest(CustomErrorHandlerTestMixin, TestCase):\n    \"\"\"Tests for CustomServerErrorView.\"\"\"\n\n    error_handler = CustomServerErrorView\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.RaiseBadRequestView","title":"<code>RaiseBadRequestView</code>","text":"<p>             Bases: <code>RaiseExceptionView</code></p> <p>View that raises a 400 Bad Request exception.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class RaiseBadRequestView(RaiseExceptionView):\n    \"\"\"View that raises a 400 Bad Request exception.\"\"\"\n\n    exception = BadRequest\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.RaiseExceptionView","title":"<code>RaiseExceptionView</code>","text":"<p>             Bases: <code>View</code></p> <p>View that raises the exception attribute.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class RaiseExceptionView(View):\n    \"\"\"View that raises the exception attribute.\"\"\"\n\n    exception: Exception\n\n    def get(self, request: HttpRequest) -&gt; NoReturn:\n        \"\"\"Raises the specified exception.\"\"\"\n        raise self.exception\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.RaiseExceptionView.get","title":"<code>get(request)</code>","text":"<p>Raises the specified exception.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def get(self, request: HttpRequest) -&gt; NoReturn:\n    \"\"\"Raises the specified exception.\"\"\"\n    raise self.exception\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.RaiseNotFoundView","title":"<code>RaiseNotFoundView</code>","text":"<p>             Bases: <code>RaiseExceptionView</code></p> <p>View that raises a 404 Not Found exception.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class RaiseNotFoundView(RaiseExceptionView):\n    \"\"\"View that raises a 404 Not Found exception.\"\"\"\n\n    exception = Http404\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.ServerErrorView","title":"<code>ServerErrorView</code>","text":"<p>             Bases: <code>BaseView</code>, <code>View</code></p> <p>View that has error.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>class ServerErrorView(BaseView, View):\n    \"\"\"View that has error.\"\"\"\n\n    def get(self, request: HttpRequest) -&gt; HttpResponse:\n        \"\"\"Has error before returns response.\"\"\"\n        print(1 / 0)  # ZeroDivisionError\n        return HttpResponse(\"Some content\")\n</code></pre>"},{"location":"general/test_error_views/#general.test_error_views.ServerErrorView.get","title":"<code>get(request)</code>","text":"<p>Has error before returns response.</p> Source code in <code>general\\test_error_views.py</code> <pre><code>def get(self, request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"Has error before returns response.\"\"\"\n    print(1 / 0)  # ZeroDivisionError\n    return HttpResponse(\"Some content\")\n</code></pre>"},{"location":"general/views/","title":"test_views.py","text":""},{"location":"general/views/#general.views.BaseView","title":"<code>BaseView</code>","text":"<p>Base view for all other views with exception handling.</p> Source code in <code>general\\views.py</code> <pre><code>class BaseView:\n    \"\"\"Base view for all other views with exception handling.\"\"\"\n\n    def dispatch(\n        self, request: http.HttpRequest, *args, **kwargs\n    ) -&gt; http.HttpResponse:\n        \"\"\"Handles exceptions during dispatch and returns a response.\"\"\"\n        try:\n            return super().dispatch(request, *args, **kwargs)\n        except Exception as e:\n            exception_type = type(e)\n\n            # Check if it's an exception for which there is an error handler.\n            if exception_type in (http.Http404, BadRequest):\n                raise e\n\n            logger.error(\n                f\"{exception_type}('{str(e)}') during working with {request.path} URL\"\n            )\n\n            error_view = CustomServerErrorView\n            return render_error_page(\n                request,\n                Error(\n                    error_view.code, error_view.name, error_view.description\n                ),\n            )\n</code></pre>"},{"location":"general/views/#general.views.BaseView.dispatch","title":"<code>dispatch(request, *args, **kwargs)</code>","text":"<p>Handles exceptions during dispatch and returns a response.</p> Source code in <code>general\\views.py</code> <pre><code>def dispatch(\n    self, request: http.HttpRequest, *args, **kwargs\n) -&gt; http.HttpResponse:\n    \"\"\"Handles exceptions during dispatch and returns a response.\"\"\"\n    try:\n        return super().dispatch(request, *args, **kwargs)\n    except Exception as e:\n        exception_type = type(e)\n\n        # Check if it's an exception for which there is an error handler.\n        if exception_type in (http.Http404, BadRequest):\n            raise e\n\n        logger.error(\n            f\"{exception_type}('{str(e)}') during working with {request.path} URL\"\n        )\n\n        error_view = CustomServerErrorView\n        return render_error_page(\n            request,\n            Error(\n                error_view.code, error_view.name, error_view.description\n            ),\n        )\n</code></pre>"},{"location":"spa/settings/","title":"settings.py","text":""},{"location":"spa/settings/#spa.settings.get_generated_captcha_challenge","title":"<code>get_generated_captcha_challenge()</code>","text":"<p>Returns a generated captcha challenge tuple(challenge, response).</p> Source code in <code>spa\\settings.py</code> <pre><code>def get_generated_captcha_challenge() -&gt; tuple[str, str]:\n    \"\"\"Returns a generated captcha challenge tuple(challenge, response).\"\"\"\n    challenge = \"\".join(choices(string.ascii_uppercase + string.digits, k=5))\n    response = challenge.lower()\n    return (challenge, response)\n</code></pre>"},{"location":"spa/urls/","title":"urls.py","text":""},{"location":"spa/wsgi/","title":"wsgi.py","text":""}]}